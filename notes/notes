-Must specify both .c and .h files as prerequisits in make.
-Dissable the pic if not used, otherwise it might generate df (vector 8) interrupts
-__attribute__((packed)) could be important if creating structs to match memory locations (e.g. descriptors)
-returning from an interrupt can not be done in C (at least not without the right attributes) because the stack will get fucked
-very important with clobbeered registers, i.e. telling the compiler which register you have used in an __asm__ statement




stuff that might cause trouble:

printf, what happens if str contains %, what happens if arg string contains %?

-in qemu, the command ring continunes processing commands even if the event ring is full,
probably not how real hardware works, but migh have to solve this

-for some reason a event TRB segment with n slots, only reciveces n-1 events (including event ring full event)
-does segmenting work (command ring probably works but event ring is unsure)

on other hardware:
    A-20 line might not get enabled corectly
    Currently assumes that an apic is present
(FIXED: SERIOUS: interrupts 0-31 are all assumed to be caused by exceptions that generate error codes (stack will get fucked otherwise))

   __asm__ volatile ("mov 0x8(%%ebp), %0" : "=r"(v3));*/

Alignment of data referenced by the data buffer lo and hi in a data stage TRB might need to be 64 / 128 bit aligned for
qemu for example. Although it is only recomended (p.470)
   

APIC:
Registers start at: FEE00000H. and uses 4KB of space. (Strong uncachable?)
can relocate, on MP (multiprocessor system) all are located at the same place to begin with
register allignade till 128, finns 32,64,,256 bitar breda register
cpuid to se if it exists, 
on systems with 3 wire buss it can not be enabled on the fly. When enabling prevent interupts. When dissabling config state could be lost
also has a software enable/dissable flag, when dissabled don't try to change the mask. THE APIC does some stuff even when dissabled: IPI
(INIT Reset is a thing)
when low double word of ICR is written to, APIC creates IPI message in ICR register.
Skriva till EOI(ENd or interrupt) n채r man 채r klar



=r betyder anv채nd vilket register som helst(r), och skit i startv채rdet (=)

xhc:
little endian, lower addresses contain least significant

The following struct is taking 5 bytes of space
but if uint16_t other is replaced with uint16_t other : 16
the struct only takes 4 bytes of space
typedef volatile struct{
   uint8_t CCS : 1;
   uint16_t other;
   uint8_t CSC : 1;
   uint16_t other2 : 14;
}__attribute__((packed))PortStatusAndControll;

____________USB MASS STORAGE_______________________
Because of the union, this struct takes 2 bytes:
typedef struct{
    uint8_t a : 7;
    union{
        uint8_t b : 1;
        uint8_t c : 1;
    }
}__attribute__((packed))Test;

SCSI is big endian (most valuable bit first) while c is little endian.
Muse convert.

_____________________FUCKING IMPORTANT______________________
IF A PCI DEVICE USES DMA IT MUST HAVE THE BUS MASTER (PCI COMMAND REGISTER BIT 2) SET TO 1 IN ORDER TO ACCESS THE BUS AND READ MEMORY!!!!!!!!!
TAKE CONTROLL OVER XHCI FROM BIOS EXPLICITLY!!!
SPEED MUST BE SET IN SLOT CONTEXT!!!!!!

FLADJ? (In case BIOS did not write to it for me)
Xhci should config pci itself

USE $ for numbers when writing at&t assembly (inlie assembly)


___PHYSICAL ADDRESS ALLOCATION_____
How do i aquire the physical address for use for MMIO?
Considerations:
    - Must be able to read/write certain physical addresses
    - Must be able to allocate physical addresses, that won't be swapped in to secondary memory

Approach 1:
    uintptr_t paging_linearToPhysicalAddress(uintptr_t linearAddress);
    void dissallowSwaping(uintptr_t linearAddress);
    void allowSwaping(uintprt_t linearAddress);

    void writePhysical(uintprt_t address, uint8_t *buffer, uint32_t bufferSize);
    void readPhysical(uintprt_t address, uint8_t *buffer, uint32_t bufferSize);

pros:
    Would work nicely with the current malloc implementation. Just do malloc, and dissalow swapping for the result.
    Convert to physical memmory when handing to hardware.

cons:
    I need to use both allowSwaping and free when deallocating the memory.



Approach 2:
    uintprt_t getPhysicalPage()
    void freePhysicalPage()

    void writePhysical(uintprt_t address, uint8_t *buffer, uint32_t bufferSize);
    void readPhysical(uintprt_t address, uint8_t *buffer, uint32_t bufferSize);

pros:
    Don't have to care how the physical memory is allocated

cons:
    !!Would need som kind of malloc that only works on that page somehow?


Aproach 3:
    Ask for direct mapped memory.

pros:
    easy to use, no need for writePhysical, readPhysical or dissalowSpawing and allowSwaping

cons: 
    !!Might not be able to find any such memory


___ writePhysical(uintprt address, void *data, size) ___
                        vs
     ___getLogical(uintptr_t address) ___

getLogical would be simpler to use, could mostly use it as if it was direct mapped:
e.g. read physical address, convert to logical and then use logical as if it were
physical.
Problem: Must keep track of which addresses are physical and which are logical.
For example:
struct SoftwareStruct{
    uint32_t data;
    struct HardWareStruct *ptr;
}
struct HardwareStruct{
    uint32_t data;
    uintptr_t pointerToSomeOtherData;
}

I would initialize my software struct like this:

struct SoftwareStruct ss = {
    .data = myData,
    .ptr = physicalToLogical(addressToHardwareStruct);
}

And when I want to access the data int the hardware struct i do

uint32_t value = ss.ptr->data;

However, when i want to access the data pointed to by the hardware struct,
i would have to do:

uintprt_t physical = ss.ptr->pointerToSomeOtherData;
uint32_t *logical = (uint32_t *)physicalToLogical(physical);
uint32_t value = *logical;

I think this is too confusing, and will go with the writePhysical approach,
and always use it when wanting to write to a physical address. Also, that way
I can abstract away the requirement that logical pages mapping to continuous physical pages
are also continuous;


____SERIAL____
Make sure to only use 8bit reads/writes


## Virtual box
### Connecting to vbox:
Config with 
    connect to existing pipe = false
    path/address = /tmp/vbox    (for example)

then run minicom -D unix#/tmp/vbox -b [baudrate]

### Connecting USB to virtual box:
Seems like I need Chipset ICH9 to get MSI or MSI-X to work currently. (No idea why)
Also need enable I/O APIC 
Need to run "sudo adduser $USER vboxusers" and reboot before selcting USB device in USB Device Filters


__PAGING__
I Want the active page table to always be located in linear memory
Reason: E.g. when handling pagefaults, I want to be able to add entries into the page table.
        Then I can not use, paging_writePhysical as that also requires the page table.
        Also, subtables should be located in linear memory.

Approach 1:
    I always keep all the page tables in memory (Like i always keep kernel in memory)
    I begin by allocating 4MB, physical page from the last pages in memory,
    and i have a global allocator in that memory, used when allocating page tables.
    When creating a new context, I make sure this 4MB (or 2MB) page is in memory.
    When paging is enabled, and I am creating a new context, I can do normal writes to the
    new paging tables, as these are already in memory.

    Pros: Simple, know where the page tables are
    Cons: Limited to n * 1024 (n * 512) pages, will probably waste many 4KB pages

Approach 2:
    I keep only local page tables in linear memory. When creating a new context, I allocate pages 
    using physpage_getPage4KB(), and write to it using paging_writePhysical. I also create a subtable
    for the last 4MB page, primaraly used for referencing the page tables.

    Pros: Flexible
    Cons: Complicated, a page table might need to have a reference to itself

Using Approach 1, to keep things simple

__Linker__
When doing
int x = 0;
void kernel_main(){
...
kprintf("%d", x);
}
This data might still be put in the bss area.
This area is not kepts when doing objcopy -O binary ...
Hence, this will print an undefined value.

If x = 1, then it is put in the data area and
1 is printed. 

- We could manually manually zero bss
- move it to data: __attribute__((section(".data"))) = ...
